// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"and",
		"assign",
		"colon",
		"comma",
		"else",
		"eq",
		"false",
		"func",
		"gt",
		"ident",
		"if",
		"int",
		"lbrace",
		"let",
		"lparen",
		"lt",
		"minus",
		"mul",
		"or",
		"period",
		"plus",
		"rbrace",
		"return",
		"rparen",
		"semicolon",
		"string_literal",
		"true",
	},

	idMap: map[string]Type{
		"INVALID":        0,
		"$":              1,
		"and":            2,
		"assign":         3,
		"colon":          4,
		"comma":          5,
		"else":           6,
		"eq":             7,
		"false":          8,
		"func":           9,
		"gt":             10,
		"ident":          11,
		"if":             12,
		"int":            13,
		"lbrace":         14,
		"let":            15,
		"lparen":         16,
		"lt":             17,
		"minus":          18,
		"mul":            19,
		"or":             20,
		"period":         21,
		"plus":           22,
		"rbrace":         23,
		"return":         24,
		"rparen":         25,
		"semicolon":      26,
		"string_literal": 27,
		"true":           28,
	},
}
